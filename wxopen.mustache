'use strict';
/*wxopen - yiluomyt*/
/**
 * {{&description}}
 * @class {{&className}}
 * @param {string} [domain] - The project domain
 */
export default class {{&className}} {

    constructor(domain){
        this.domain = domain !== undefined ? domain : 'http://localhost:5000';
        if(this.domain.length === 0) {
            throw new Error('Domain must be specified as a string.');
        }
        this.authenticate = function() {
            return new Promise((resolve, reject) => {
                reject(new Error('Please Set authenticate First.'));
            })
        };
    }

    /**
    * Set authenticate method
    * @method
    * @name {{&className}}#setAuthenticate
    * @param {function} auth - authenticate method
    */
    setAuthenticate(auth) {
        this.authenticate = auth;
    }
    uniSafeHideLoading(){
        try{
            uni.hideLoading();
        }catch(e){}
    }
    /**
    * HTTP Request
    * @method
    * @name {{&className}}#request
    * @param {string} method - HTTP 请求方法
    * @param {string} url - 开发者服务器接口地址
    * @param {object} data - 请求的参数
    * @param {object} headers - 设置请求的 header ,默认为 application/json
    */
        request(method, url, query, data, headers) {
        return new Promise((resolve, reject) => {
			if(query){
				if(method==='POST'){
					let queryArr = [];
					for (const key in query) {
					            if (query.hasOwnProperty(key)) {
					                queryArr.push(`${key}=${query[key]}`) //?url encode?
					            }
					}
					if(url.indexOf('?') !== -1) {
					            url =`${url}&${queryArr.join('&')}`
					} else {
					            url =`${url}?${queryArr.join('&')}`
					}
				}else if(method==='GET'){
					data={
						...query,
						...data
					}
				}
			}
                	uni.showLoading();
            uni.request({
                url: url,
                data: data,
                header: headers,
                method: method,
                success: res => {
                    	this.uniSafeHideLoading();
                    if (res.statusCode >= 200 && res.statusCode <= 299) {
                        resolve(res.data)
                    } else {
                        reject(res)
                    }
                },
                fail: err => {
                    	this.uniSafeHideLoading();
                        let error=err.data?.error?.message || err.errMsg;
                        uni.showToast({
                            icon: 'error',
                            title: error,
                        });
                        if(error.startsWith('[EC:110003]')){
                            console.warn('[EC:110003]错误强制清除token', err);
                            uni.clearStorageSync('serverToken');
                        }
                    reject(err);
                    }
            })
        })
    };


    {{#methods}}
        {{> method}}
    {{/methods}}
}